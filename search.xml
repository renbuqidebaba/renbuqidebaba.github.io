<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/04/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Go_Learning</title>
    <url>/2024/04/21/Go-Learning/</url>
    <content><![CDATA[<h2 id="GC机制"><a href="#GC机制" class="headerlink" title="GC机制"></a>GC机制</h2><p>go语言的GC机制：Go1.3采用<strong>标记清除法</strong>， Go1.5采用<strong>三色标记法</strong>，Go1.8采用<strong>三色标记法+混合写屏障。</strong>指的是Gc事件发生过程中，会产生应用程序的停顿。停顿产生时整个应用程序线程都会被暂停，没有任何响应，有点像卡死的感觉，这个停顿称为STW。</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.标记清除法</span><br><span class="line"></span><br><span class="line">分为两个阶段：标记和清除</span><br><span class="line"></span><br><span class="line">标记阶段：从根对象出发寻找并标记所有存活的对象。</span><br><span class="line"></span><br><span class="line">清除阶段：遍历堆中的对象，回收未标记的对象，并加入空闲链表。</span><br><span class="line"></span><br><span class="line">缺点是需要暂停程序STW。</span><br><span class="line"></span><br><span class="line">2.三色标记法：</span><br><span class="line"></span><br><span class="line">将对象标记为白色，灰色或黑色。</span><br><span class="line"></span><br><span class="line">白色：不确定对象（默认色）；黑色：存活对象。灰色：存活对象，子对象待处理。</span><br><span class="line"></span><br><span class="line">标记开始时，先将所有对象加入白色集合（需要STW）。首先将根对象标记为灰色，</span><br><span class="line">然后将一个对象从灰色集合取出，遍历其子对象，放入灰色集合。</span><br><span class="line">同时将取出的对象放入黑色集合，直到灰色集合为空。最后的白色集合对象就是需要清理的对象。</span><br><span class="line"></span><br><span class="line">这种方法有一个缺陷，如果对象的引用被用户修改了，那么之前的标记就无效了。</span><br><span class="line">因此Go采用了写屏障技术，当对象新增或者更新会将其着色为灰色。</span><br><span class="line"></span><br><span class="line">基于插入写屏障和删除写屏障在结束时需要STW来重新扫描栈，带来性能瓶颈。混合写屏障分为以下四步：</span><br><span class="line"></span><br><span class="line">GC开始时，将栈上的全部对象标记为黑色（不需要二次扫描，无需STW）；</span><br><span class="line">GC期间，任何栈上创建的新对象均为黑色</span><br><span class="line">被删除引用的对象标记为灰色</span><br><span class="line">总而言之就是确保黑色对象不能引用白色对象，这个改进直接使得GC时间从 2s降低到2us。</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>编程技术</tag>
      </tags>
  </entry>
</search>
